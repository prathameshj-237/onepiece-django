trigger:
- main
- master

variables:
  imageName: onepiece-django-app
  dockerfilePath: 'Dockerfile'
  acrLoginServer: onepieceacr.azurecr.io
  aksClusterName: onepiece-aks
  aksResourceGroup: onepiece_project
  namespace: default

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: TerraformProvision
  displayName: Terraform - Check/Create Infra
  jobs:
  - job: TerraformJob
    displayName: Terraform init, plan, apply
    steps: 
    - task: TerraformInstaller@1
      displayName: Install Terraform
      inputs:
        terraformVersion: '1.12.2'

    - task: TerraformTask@5
      displayName: Run Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '**/terraform'
        backendServiceArm: 'onepiece-azure-subscription'
        backendAzureRmResourceGroupName: 'onepiece_project'
        backendAzureRmStorageAccountName: 'onepieceterraformstorage'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'

    - task: TerraformTask@5
      name: terraformPlan
      displayName: Run Terraform Plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '**/terraform'
        commandOptions: '-out tfplan'
        environmentServiceNameAzureRM: 'onepiece-azure-subscription'

    - task: TerraformTask@5
      displayName: Run Terraform Apply
      condition: and(succeeded(), eq(variables['terraformPlan.changesPresent'], 'true'))
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '**/terraform'
        commandOptions: 'tfplan'
        environmentServiceNameAzureRM: 'onepiece-azure-subscription'

- stage: BuildAndPush
  displayName: Build and Push Docker Image to ACR
  jobs:
  - job: DockerBuild
    displayName: Build and Push Job
    steps:
    - task: Docker@2
      displayName: Build and Push to ACR
      inputs:
        containerRegistry: 'onepieceacr-connection' 
        repository: '$(imageName)'
        command: 'buildAndPush'
        Dockerfile: '$(dockerfilePath)'
        tags: |
          latest

- stage: DeployToAKS
  displayName: Deploy to Azure Kubernetes Service
  dependsOn: BuildAndPush
  jobs:
  - job: DeployJob
    displayName: Deploy to AKS
    steps:
    - task: AzureCLI@2
      displayName: 'Login to AKS and set context'
      inputs:
        azureSubscription: 'onepiece-azure-subscription' 
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing

    - task: KubernetesManifest@1
      displayName: 'Deploy to AKS using manifest'
      inputs:
        action: deploy
        kubernetesServiceConnection: 'onepiece-k8s-connection' 
        namespace: '$(namespace)'
        manifests: |
          k8s/deployment.yaml

    - task: Kubernetes@1
      displayName: 'Apply Service YAML'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'onepiece-k8s-connection'
        namespace: 'default'
        command: apply
        useConfigurationFile: true
        configuration: 'k8s/service.yaml'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          kubectl get pods > podsinfo.txt
          
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'podsinfo.txt'
        ArtifactName: 'drop'
        publishLocation: 'Container'